--- homeassistant/components/moon/sensor.py.orig	2020-08-01 13:37:05 UTC
+++ homeassistant/components/moon/sensor.py
@@ -1,7 +1,7 @@
 """Support for tracking the moon phases."""
 import logging
 
-from astral import Astral
+from astral import moon
 import voluptuous as vol
 
 from homeassistant.components.sensor import PLATFORM_SCHEMA
@@ -91,4 +91,4 @@ class MoonSensor(Entity):
     async def async_update(self):
         """Get the time and updates the states."""
         today = dt_util.as_local(dt_util.utcnow()).date()
-        self._state = Astral().moon_phase(today)
+        self._state = moon.phase(today)
--- homeassistant/components/sun/__init__.py.orig	2020-08-01 13:37:05 UTC
+++ homeassistant/components/sun/__init__.py
@@ -92,6 +92,7 @@ class Sun(Entity):
         """Initialize the sun."""
         self.hass = hass
         self.location = None
+        self.elevation = 0.0
         self._state = self.next_rising = self.next_setting = None
         self.next_dawn = self.next_dusk = None
         self.next_midnight = self.next_noon = None
@@ -100,7 +101,7 @@ class Sun(Entity):
         self._next_change = None
 
         def update_location(_event):
-            self.location = get_astral_location(self.hass)
+            self.location, self.elevation = get_astral_location(self.hass)
             self.update_events(dt_util.utcnow())
 
         update_location(None)
@@ -137,7 +138,7 @@ class Sun(Entity):
 
     def _check_event(self, utc_point_in_time, sun_event, before):
         next_utc = get_location_astral_event_next(
-            self.location, sun_event, utc_point_in_time
+            self.location, self.elevation, sun_event, utc_point_in_time
         )
         if next_utc < self._next_change:
             self._next_change = next_utc
@@ -164,7 +165,7 @@ class Sun(Entity):
         )
         self.location.solar_depression = -10
         self._check_event(utc_point_in_time, "dawn", PHASE_SMALL_DAY)
-        self.next_noon = self._check_event(utc_point_in_time, "solar_noon", None)
+        self.next_noon = self._check_event(utc_point_in_time, "noon", None)
         self._check_event(utc_point_in_time, "dusk", PHASE_DAY)
         self.next_setting = self._check_event(
             utc_point_in_time, SUN_EVENT_SUNSET, PHASE_SMALL_DAY
@@ -175,9 +176,7 @@ class Sun(Entity):
         self._check_event(utc_point_in_time, "dusk", PHASE_NAUTICAL_TWILIGHT)
         self.location.solar_depression = "astronomical"
         self._check_event(utc_point_in_time, "dusk", PHASE_ASTRONOMICAL_TWILIGHT)
-        self.next_midnight = self._check_event(
-            utc_point_in_time, "solar_midnight", None
-        )
+        self.next_midnight = self._check_event(utc_point_in_time, "midnight", None)
         self.location.solar_depression = "civil"
 
         # if the event was solar midday or midnight, phase will now
@@ -185,7 +184,7 @@ class Sun(Entity):
         # even in the day at the poles, so we can't rely on it.
         # Need to calculate phase if next is noon or midnight
         if self.phase is None:
-            elevation = self.location.solar_elevation(self._next_change)
+            elevation = self.location.solar_elevation(self._next_change, self.elevation)
             if elevation >= 10:
                 self.phase = PHASE_DAY
             elif elevation >= 0:
@@ -215,9 +214,11 @@ class Sun(Entity):
     @callback
     def update_sun_position(self, utc_point_in_time):
         """Calculate the position of the sun."""
-        self.solar_azimuth = round(self.location.solar_azimuth(utc_point_in_time), 2)
+        self.solar_azimuth = round(
+            self.location.solar_azimuth(utc_point_in_time, self.elevation), 2
+        )
         self.solar_elevation = round(
-            self.location.solar_elevation(utc_point_in_time), 2
+            self.location.solar_elevation(utc_point_in_time, self.elevation), 2
         )
 
         _LOGGER.debug(
--- homeassistant/helpers/sun.py.orig	2020-08-01 13:37:05 UTC
+++ homeassistant/helpers/sun.py
@@ -1,6 +1,6 @@
 """Helpers for sun events."""
 import datetime
-from typing import TYPE_CHECKING, Optional, Union
+from typing import TYPE_CHECKING, Optional, Tuple, Union
 
 from homeassistant.const import SUN_EVENT_SUNRISE, SUN_EVENT_SUNSET
 from homeassistant.core import callback
@@ -14,28 +14,33 @@ if TYPE_CHECKING:
 
 DATA_LOCATION_CACHE = "astral_location_cache"
 
+ELEVATION_AGNOSTIC_EVENTS = ("noon", "midnight")
 
+
 @callback
 @bind_hass
-def get_astral_location(hass: HomeAssistantType) -> "astral.Location":
+def get_astral_location(
+    hass: HomeAssistantType,
+) -> Tuple["astral.location.Location", "astral.Elevation"]:
     """Get an astral location for the current Home Assistant configuration."""
 
-    from astral import Location  # pylint: disable=import-outside-toplevel
+    from astral import LocationInfo  # pylint: disable=import-outside-toplevel
+    from astral.location import Location  # pylint: disable=import-outside-toplevel
 
+    timezone = str(hass.config.time_zone)
     latitude = hass.config.latitude
     longitude = hass.config.longitude
-    timezone = str(hass.config.time_zone)
     elevation = hass.config.elevation
-    info = ("", "", latitude, longitude, timezone, elevation)
+    info = ("", "", timezone, latitude, longitude)
 
     # Cache astral locations so they aren't recreated with the same args
     if DATA_LOCATION_CACHE not in hass.data:
         hass.data[DATA_LOCATION_CACHE] = {}
 
     if info not in hass.data[DATA_LOCATION_CACHE]:
-        hass.data[DATA_LOCATION_CACHE][info] = Location(info)
+        hass.data[DATA_LOCATION_CACHE][info] = Location(LocationInfo(*info))
 
-    return hass.data[DATA_LOCATION_CACHE][info]
+    return hass.data[DATA_LOCATION_CACHE][info], elevation
 
 
 @callback
@@ -47,26 +52,31 @@ def get_astral_event_next(
     offset: Optional[datetime.timedelta] = None,
 ) -> datetime.datetime:
     """Calculate the next specified solar event."""
-    location = get_astral_location(hass)
-    return get_location_astral_event_next(location, event, utc_point_in_time, offset)
+    location, elevation = get_astral_location(hass)
+    return get_location_astral_event_next(
+        location, elevation, event, utc_point_in_time, offset
+    )
 
 
 @callback
 def get_location_astral_event_next(
-    location: "astral.Location",
+    location: "astral.location.Location",
+    elevation: "astral.Elevation",
     event: str,
     utc_point_in_time: Optional[datetime.datetime] = None,
     offset: Optional[datetime.timedelta] = None,
 ) -> datetime.datetime:
     """Calculate the next specified solar event."""
-    from astral import AstralError  # pylint: disable=import-outside-toplevel
-
     if offset is None:
         offset = datetime.timedelta()
 
     if utc_point_in_time is None:
         utc_point_in_time = dt_util.utcnow()
 
+    kwargs = {"local": False}
+    if event not in ELEVATION_AGNOSTIC_EVENTS:
+        kwargs["observer_elevation"] = elevation
+
     mod = -1
     while True:
         try:
@@ -74,13 +84,13 @@ def get_location_astral_event_next(
                 getattr(location, event)(
                     dt_util.as_local(utc_point_in_time).date()
                     + datetime.timedelta(days=mod),
-                    local=False,
+                    **kwargs,
                 )
                 + offset
             )
             if next_dt > utc_point_in_time:
                 return next_dt
-        except AstralError:
+        except ValueError:
             pass
         mod += 1
 
@@ -93,19 +103,21 @@ def get_astral_event_date(
     date: Union[datetime.date, datetime.datetime, None] = None,
 ) -> Optional[datetime.datetime]:
     """Calculate the astral event time for the specified date."""
-    from astral import AstralError  # pylint: disable=import-outside-toplevel
+    location, elevation = get_astral_location(hass)
 
-    location = get_astral_location(hass)
-
     if date is None:
         date = dt_util.now().date()
 
     if isinstance(date, datetime.datetime):
         date = dt_util.as_local(date).date()
 
+    kwargs = {"local": False}
+    if event not in ELEVATION_AGNOSTIC_EVENTS:
+        kwargs["observer_elevation"] = elevation
+
     try:
-        return getattr(location, event)(date, local=False)  # type: ignore
-    except AstralError:
+        return getattr(location, event)(date, **kwargs)  # type: ignore
+    except ValueError:
         # Event never occurs for specified date.
         return None
 
--- homeassistant/package_constraints.txt.orig	2020-08-01 13:37:05 UTC
+++ homeassistant/package_constraints.txt
@@ -2,7 +2,7 @@ PyJWT==1.7.1
 PyNaCl==1.3.0
 aiohttp==3.6.1
 aiohttp_cors==0.7.0
-astral==1.10.1
+astral==2.2
 async_timeout==3.0.1
 attrs==19.3.0
 bcrypt==3.1.7
@@ -21,7 +21,7 @@ paho-mqtt==1.5.0
 pip>=8.0.3
 python-slugify==4.0.0
 pytz>=2020.1
-pyyaml==5.3.1
+pyyaml==5.2.0
 requests==2.24.0
 ruamel.yaml==0.15.100
 sqlalchemy==1.3.18
--- setup.py.orig	2020-08-01 13:37:05 UTC
+++ setup.py
@@ -32,22 +32,22 @@ PROJECT_URLS = {
 PACKAGES = find_packages(exclude=["tests", "tests.*"])
 
 REQUIRES = [
-    "aiohttp==3.6.1",
-    "astral==1.10.1",
+    "aiohttp==3.5.0",
+    "astral==2.1",
     "async_timeout==3.0.1",
     "attrs==19.3.0",
     "bcrypt==3.1.7",
     "certifi>=2020.4.5.1",
     "ciso8601==2.1.3",
     "importlib-metadata==1.6.0;python_version<'3.8'",
-    "jinja2>=2.11.1",
+    "jinja2>=2.10.0",
     "PyJWT==1.7.1",
     # PyJWT has loose dependency. We want the latest one.
-    "cryptography==2.9.2",
+    "cryptography==2.6.0",
     "pip>=8.0.3",
     "python-slugify==4.0.0",
-    "pytz>=2020.1",
-    "pyyaml==5.3.1",
+    "pytz>=2019.3",
+    "pyyaml==5.2.0",
     "requests==2.24.0",
     "ruamel.yaml==0.15.100",
     "voluptuous==0.11.7",
